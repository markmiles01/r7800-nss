#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

env:
  REPO_URL: https://github.com/ACwifidude/openwrt
  REPO_BRANCH: kernel5.4-nss-qsdk10.0
  BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  FEED_CLEAN: feed-clean.sh
  DEF_SETS: zzz-default-settings
  UPLOAD_BRANCH: true
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: America/Chicago
  BUILD_USER: markmiles01
  GITHUB_USER_NAME: markmiles01
  GITHUB_USER_EMAIL: ${{ secrets.EMAIL }}
  GITHUB: github.com/markmiles01/r7800-nss.git

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'true'
#      debug_enabled:
#        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'     
#        required: false
#        default: false
jobs:
  build:
    runs-on:  ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      with:
        mode: ngrok
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        # After sign up on the https://ngrok.com
        # You can find this token here: https://dashboard.ngrok.com/auth/your-authtoken
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
        # ngrok server region [us, eu, au, ap, sa, jp, in] (optional, default: us)
        # You can find this server region here: https://ngrok.com/docs#global-locations
        NGROK_REGION: us
        # This password you will use when authorizing via SSH
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        # Send connection info to Telegram (optional)
        # You can find related documents here: https://core.telegram.org/bots
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      
 #   - name: tmate SSH
 #     uses: actions/checkout@v2
 #   - name: Setup tmate session
 #     uses: mxschmitt/action-tmate@v3
 #     with:
 #         limit-access-to-actor: true
 ##         sudo: false
 #     timeout-minutes: 15
 #     if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}  
  
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://git.io/JqITC)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH        
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: |
        chmod +x $FEED_CLEAN
        cd openwrt && ./scripts/feeds update -a
        $GITHUB_WORKSPACE/$FEED_CLEAN

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a
  
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        # [ -e $DEF_SETS ] && mv -f $DEF_SETS openwrt/package/lean/default-settings/files/
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
    
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=-$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT
    
    - name: Upload Branch
      env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: |
          cp openwrt/.config openwrt/bin/targets/ipq806x/generic/full.build.config
          cd openwrt/bin
          git init
          git config user.name $GITHUB_USER_NAME
          git config user.email $GITHUB_USER_EMAIL
          git add .
          git commit -m "Update OpenWrt_"$BRANCH
          git push --force --quiet https://${{ secrets.RELEASE_TOKEN }}@$GITHUB HEAD:$BRANCH
    
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        rm -rf *uImage
        mv openwrt-ipq806x-generic-netgear_r7800-squashfs-sysupgrade.bin openwrt-ipq806x-generic-netgear_r7800-squashfs-sysupgrade${{ env.FILE_DATE }}.bin
        mv openwrt-ipq806x-generic-netgear_r7800-squashfs-factory.img openwrt-ipq806x-generic-netgear_r7800-squashfsfactory${{ env.FILE_DATE }}.img
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=$(date +"%Y-%m-%d.%H%M")" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload Firmware To Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        name: Netgear ${{ env.BRANCH }} ðŸš€ | è‡ªåŠ¨ç¼–è¯‘ / ${{ env.RELEASE_TAG }}
        tag_name: ${{ env.RELEASE_TAG }}
        body: |            
            ${{ env.REPO_URL }}
            -- Build by ${{ env.BUILD_USER }} @ with Github Action on ${{ env.RELEASE_TAG }}
            ðŸš€ Auto build | è‡ªåŠ¨ç¼–è¯‘    
            https://github.com/kenzok8/packages-1
            ${{ env.useVersionInfo }}
            ${{ github.event.commits[0].message }}
        files: ${{ env.FIRMWARE }}/*
    
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
